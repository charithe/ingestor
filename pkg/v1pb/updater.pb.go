// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/v1pb/updater.proto

/*
	Package v1pb is a generated protocol buffer package.

	It is generated from these files:
		pkg/v1pb/updater.proto

	It has these top-level messages:
		UpdateRequest
		UpdateResponse
*/
package v1pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UpdateStatus int32

const (
	UpdateStatus_OK    UpdateStatus = 0
	UpdateStatus_ERROR UpdateStatus = 1
)

var UpdateStatus_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}
var UpdateStatus_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x UpdateStatus) String() string {
	return proto.EnumName(UpdateStatus_name, int32(x))
}
func (UpdateStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorUpdater, []int{0} }

type UpdateRequest struct {
	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email        string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	MobileNumber string `protobuf:"bytes,4,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorUpdater, []int{0} }

func (m *UpdateRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateRequest) GetMobileNumber() string {
	if m != nil {
		return m.MobileNumber
	}
	return ""
}

type UpdateResponse struct {
	Id     int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status UpdateStatus `protobuf:"varint,2,opt,name=status,proto3,enum=io.github.charithe.updater.v1.UpdateStatus" json:"status,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorUpdater, []int{1} }

func (m *UpdateResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateResponse) GetStatus() UpdateStatus {
	if m != nil {
		return m.Status
	}
	return UpdateStatus_OK
}

func init() {
	proto.RegisterType((*UpdateRequest)(nil), "io.github.charithe.updater.v1.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "io.github.charithe.updater.v1.UpdateResponse")
	proto.RegisterEnum("io.github.charithe.updater.v1.UpdateStatus", UpdateStatus_name, UpdateStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Updater service

type UpdaterClient interface {
	// receives a stream of UpdateRequests and streams back an UpdateResponse for each
	Update(ctx context.Context, opts ...grpc.CallOption) (Updater_UpdateClient, error)
}

type updaterClient struct {
	cc *grpc.ClientConn
}

func NewUpdaterClient(cc *grpc.ClientConn) UpdaterClient {
	return &updaterClient{cc}
}

func (c *updaterClient) Update(ctx context.Context, opts ...grpc.CallOption) (Updater_UpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Updater_serviceDesc.Streams[0], c.cc, "/io.github.charithe.updater.v1.Updater/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &updaterUpdateClient{stream}
	return x, nil
}

type Updater_UpdateClient interface {
	Send(*UpdateRequest) error
	Recv() (*UpdateResponse, error)
	grpc.ClientStream
}

type updaterUpdateClient struct {
	grpc.ClientStream
}

func (x *updaterUpdateClient) Send(m *UpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *updaterUpdateClient) Recv() (*UpdateResponse, error) {
	m := new(UpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Updater service

type UpdaterServer interface {
	// receives a stream of UpdateRequests and streams back an UpdateResponse for each
	Update(Updater_UpdateServer) error
}

func RegisterUpdaterServer(s *grpc.Server, srv UpdaterServer) {
	s.RegisterService(&_Updater_serviceDesc, srv)
}

func _Updater_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpdaterServer).Update(&updaterUpdateServer{stream})
}

type Updater_UpdateServer interface {
	Send(*UpdateResponse) error
	Recv() (*UpdateRequest, error)
	grpc.ServerStream
}

type updaterUpdateServer struct {
	grpc.ServerStream
}

func (x *updaterUpdateServer) Send(m *UpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *updaterUpdateServer) Recv() (*UpdateRequest, error) {
	m := new(UpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Updater_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.github.charithe.updater.v1.Updater",
	HandlerType: (*UpdaterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _Updater_Update_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/v1pb/updater.proto",
}

func (m *UpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUpdater(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpdater(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUpdater(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.MobileNumber) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUpdater(dAtA, i, uint64(len(m.MobileNumber)))
		i += copy(dAtA[i:], m.MobileNumber)
	}
	return i, nil
}

func (m *UpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUpdater(dAtA, i, uint64(m.Id))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUpdater(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeFixed64Updater(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Updater(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUpdater(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUpdater(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUpdater(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUpdater(uint64(l))
	}
	l = len(m.MobileNumber)
	if l > 0 {
		n += 1 + l + sovUpdater(uint64(l))
	}
	return n
}

func (m *UpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUpdater(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovUpdater(uint64(m.Status))
	}
	return n
}

func sovUpdater(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUpdater(x uint64) (n int) {
	return sovUpdater(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdater
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdater
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdater
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdater
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdater
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdater
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdater
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdater
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdater(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdater
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdater
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdater
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdater
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (UpdateStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdater(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdater
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdater(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdater
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdater
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdater
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUpdater
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUpdater
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUpdater(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUpdater = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdater   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pkg/v1pb/updater.proto", fileDescriptorUpdater) }

var fileDescriptorUpdater = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xdd, 0xb4, 0x8d, 0x74, 0x68, 0x43, 0x19, 0x44, 0x82, 0x60, 0xa8, 0xf5, 0x12, 0xfc,
	0xb3, 0xb5, 0xf5, 0x0d, 0x14, 0x4f, 0x82, 0x85, 0x15, 0x2f, 0x5e, 0x24, 0x31, 0x43, 0xb3, 0xd8,
	0xfc, 0x31, 0xbb, 0xdb, 0x67, 0xf4, 0xe8, 0x23, 0x48, 0x9e, 0x44, 0xdc, 0x6d, 0x41, 0x10, 0xa4,
	0xb7, 0x99, 0x6f, 0xbf, 0xd9, 0x1f, 0x33, 0x1f, 0x1c, 0xd6, 0x6f, 0xcb, 0xe9, 0x7a, 0x56, 0xa7,
	0x53, 0x53, 0x67, 0x89, 0xa6, 0x86, 0xd7, 0x4d, 0xa5, 0x2b, 0x3c, 0x96, 0x15, 0x5f, 0x4a, 0x9d,
	0x9b, 0x94, 0xbf, 0xe6, 0x49, 0x23, 0x75, 0x4e, 0x7c, 0xeb, 0x58, 0xcf, 0x26, 0x25, 0x0c, 0x9f,
	0x6c, 0x27, 0xe8, 0xdd, 0x90, 0xd2, 0x18, 0x80, 0x27, 0xb3, 0x90, 0x8d, 0x59, 0xdc, 0x11, 0x9e,
	0xcc, 0x10, 0xa1, 0x5b, 0x26, 0x05, 0x85, 0xde, 0x98, 0xc5, 0x7d, 0x61, 0x6b, 0x3c, 0x80, 0x1e,
	0x15, 0x89, 0x5c, 0x85, 0x1d, 0x2b, 0xba, 0x06, 0x4f, 0x61, 0x58, 0x54, 0xa9, 0x5c, 0xd1, 0x4b,
	0x69, 0x8a, 0x94, 0x9a, 0xb0, 0x6b, 0x5f, 0x07, 0x4e, 0x7c, 0xb0, 0xda, 0x84, 0x20, 0xd8, 0xf2,
	0x54, 0x5d, 0x95, 0x8a, 0xfe, 0x00, 0x6f, 0xc1, 0x57, 0x3a, 0xd1, 0x46, 0x59, 0x64, 0x30, 0x3f,
	0xe7, 0xff, 0x6e, 0xc0, 0xdd, 0x77, 0x8f, 0x76, 0x44, 0x6c, 0x46, 0xcf, 0x4e, 0x60, 0xf0, 0x5b,
	0x47, 0x1f, 0xbc, 0xc5, 0xfd, 0x68, 0x0f, 0xfb, 0xd0, 0xbb, 0x13, 0x62, 0x21, 0x46, 0x6c, 0xae,
	0x61, 0xdf, 0x59, 0x1a, 0x94, 0xe0, 0xbb, 0x12, 0x2f, 0x76, 0x82, 0x6d, 0x6e, 0x75, 0x74, 0xb9,
	0xa3, 0xdb, 0x6d, 0x1a, 0xb3, 0x2b, 0x76, 0x83, 0x1f, 0x6d, 0xc4, 0x3e, 0xdb, 0x88, 0x7d, 0xb5,
	0x11, 0x7b, 0xee, 0xfe, 0x04, 0x96, 0xfa, 0x36, 0xa9, 0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x07, 0xf6, 0x28, 0x05, 0xc3, 0x01, 0x00, 0x00,
}
